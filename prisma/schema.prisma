generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Guild {
  id            String          @id
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  config        GuildConfig?
  reminders     Reminder[]
  roleMenus     RoleMenu[]
  warnings      Warning[]
  moderationLog ModerationAction[]
  pinnedMessages PinnedMessage[]
  tickets       Ticket[]
  members       GuildUser[]
  polls         Poll[]
  notes         Note[]
  tasks         Task[]
  activityRecords ActivityRecord[]
  scheduledJobs ScheduledJob[]
  gameBiases    GameBias[]
  currencyBalances CurrencyBalance[]
  currencyTransactions CurrencyTransaction[]
  shopItems     ShopItem[]
}

model GuildConfig {
  id             Int      @id @default(autoincrement())
  guildId        String   @unique
  logChannelId   String?
  muteRoleId     String?
  timezone       String?  @default("Asia/Tokyo")
  reminderRoleId String?
  autoRoleId     String?
  passwordAuthRoleId       String?
  passwordAuthSecretHash   String?
  passwordAuthHint         String?
  passwordAuthUpdatedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  guild          Guild    @relation(fields: [guildId], references: [id])
}

model PasswordReveal {
  id          Int      @id @default(autoincrement())
  customId    String   @unique
  guildId     String
  channelId   String
  createdById String
  password    String?
  title       String?
  description String?
  buttonLabel String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  mode        PasswordPanelMode @default(DISPLAY)
}

enum PasswordPanelMode {
  DISPLAY
  INPUT
}
model User {
  id                   Int                 @id @default(autoincrement())
  discordId            String              @unique
  username             String?
  guildUsers           GuildUser[]
  reminders            Reminder[]
  warnings             Warning[]           @relation("WarningTarget")
  issuedWarnings       Warning[]           @relation("WarningModerator")
  moderationActions    ModerationAction[]  @relation("ActionTarget")
  issuedActions        ModerationAction[]  @relation("ActionModerator")
  createdRoleMenus     RoleMenu[]          @relation("RoleMenuCreatedBy")
  pinnedMessages       PinnedMessage[]     @relation("PinnedByUser")
  tickets              Ticket[]            @relation("TicketOwner")
  pollsCreated        Poll[]               @relation("PollCreatedBy")
  pollVotes           PollVote[]
  notes               Note[]               @relation("NoteAuthor")
  tasksCreated        Task[]               @relation("TaskCreator")
  tasksAssigned       Task[]               @relation("TaskAssignee")
  activityRecords     ActivityRecord[]     @relation("ActivityUser")
  gameBiases          GameBias[]
  currencyBalances    CurrencyBalance[]
  currencyTransactions CurrencyTransaction[]
}

model GuildUser {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    Int
  joinedAt  DateTime @default(now())
  isMuted   Boolean  @default(false)
  guild     Guild    @relation(fields: [guildId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([guildId, userId])
}

model Reminder {
  id            Int      @id @default(autoincrement())
  guildId       String
  userId        Int
  channelId     String
  message       String
  cronExpression String
  nextTriggerAt DateTime?
  timezone      String  @default("Asia/Tokyo")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  guild         Guild   @relation(fields: [guildId], references: [id])
  user          User    @relation(fields: [userId], references: [id])
}

model RoleMenu {
  id            Int        @id @default(autoincrement())
  guildId       String
  channelId     String
  messageId     String?
  title         String
  description   String?
  maxSelectable Int        @default(1)
  createdById   Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  guild         Guild      @relation(fields: [guildId], references: [id])
  createdBy     User       @relation("RoleMenuCreatedBy", fields: [createdById], references: [id])
  options       RoleMenuOption[]
}

model RoleMenuOption {
  id          Int      @id @default(autoincrement())
  roleMenuId  Int
  roleId      String
  label       String
  description String?
  emoji       String?
  isDefault   Boolean @default(false)
  roleMenu    RoleMenu @relation(fields: [roleMenuId], references: [id])

  @@unique([roleMenuId, roleId])
}

model Warning {
  id           Int      @id @default(autoincrement())
  guildId      String
  userId       Int
  moderatorId  Int
  reason       String
  penaltyLevel Int      @default(1)
  createdAt    DateTime @default(now())
  guild        Guild    @relation(fields: [guildId], references: [id])
  user         User     @relation("WarningTarget", fields: [userId], references: [id])
  moderator    User     @relation("WarningModerator", fields: [moderatorId], references: [id])
}

model ModerationAction {
  id              Int      @id @default(autoincrement())
  guildId         String
  userId          Int
  moderatorId     Int
  actionType      String
  reason          String?
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  guild           Guild    @relation(fields: [guildId], references: [id])
  targetUser      User     @relation("ActionTarget", fields: [userId], references: [id])
  moderator       User     @relation("ActionModerator", fields: [moderatorId], references: [id])
}

model PinnedMessage {
  id          Int      @id @default(autoincrement())
  guildId     String
  channelId   String
  messageId   String
  pinnedById  Int
  expiresAt   DateTime?
  sourceMessageId String?
  cloneMessageId  String?
  // snapshotContent may hold long message bodies; use LONGTEXT to avoid "value too long" errors
  snapshotContent String? @db.LongText
  snapshotEmbeds  Json?
  snapshotFiles   Json?
  createdAt   DateTime @default(now())
  guild       Guild    @relation(fields: [guildId], references: [id])
  pinnedBy    User     @relation("PinnedByUser", fields: [pinnedById], references: [id])

  @@unique([guildId, channelId])
  @@unique([guildId, channelId, messageId])
}

model Poll {
  id           Int           @id @default(autoincrement())
  guildId      String
  channelId    String
  messageId    String?
  question     String
  status       String        @default("open")
  createdById  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  guild        Guild         @relation(fields: [guildId], references: [id])
  createdBy    User          @relation("PollCreatedBy", fields: [createdById], references: [id])
  options      PollOption[]
  votes        PollVote[]
}

model PollOption {
  id        Int      @id @default(autoincrement())
  pollId    Int
  label     String
  emoji     String?
  position  Int
  poll      Poll     @relation(fields: [pollId], references: [id])
  votes     PollVote[]

  @@unique([pollId, position])
}

model PollVote {
  id        Int      @id @default(autoincrement())
  pollId    Int
  optionId  Int
  userId    Int
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id])
  option    PollOption @relation(fields: [optionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([pollId, userId])
}

model Note {
  id        Int      @id @default(autoincrement())
  guildId   String
  authorId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [id])
  author    User     @relation("NoteAuthor", fields: [authorId], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  guildId     String
  creatorId   Int
  assigneeId  Int?
  description String
  status      String   @default("open")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guild       Guild    @relation(fields: [guildId], references: [id])
  creator     User     @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

model ActivityRecord {
  id           Int      @id @default(autoincrement())
  guildId      String
  userId       Int
  date         DateTime
  messageCount Int      @default(0)
  voiceMinutes Int      @default(0)
  lastUpdated  DateTime @default(now())
  guild        Guild    @relation(fields: [guildId], references: [id])
  user         User     @relation("ActivityUser", fields: [userId], references: [id])

  @@unique([guildId, userId, date])
}

model ScheduledJob {
  id        Int      @id @default(autoincrement())
  guildId   String
  type      String
  schedule  String
  data      Json?
  lastRun   DateTime?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [id])

  @@unique([guildId, type])
}

model Ticket {
  id             Int      @id @default(autoincrement())
  guildId        String
  userId         Int
  channelId      String
  status         String   @default("open")
  createdAt      DateTime @default(now())
  closedAt       DateTime?
  guild          Guild    @relation(fields: [guildId], references: [id])
  user           User     @relation("TicketOwner", fields: [userId], references: [id])
}

model GameBias {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    Int
  gameType  String
  lossCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([guildId, userId, gameType])
}

model CurrencyBalance {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    Int
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  transactions CurrencyTransaction[]

  @@unique([guildId, userId])
  @@index([guildId])
}

model CurrencyTransaction {
  id           Int                       @id @default(autoincrement())
  guildId      String
  userId       Int
  balanceId    Int?
  type         CurrencyTransactionType
  amount       Int
  balanceAfter Int
  reason       String?
  metadata     Json?
  createdAt    DateTime                  @default(now())
  guild        Guild                     @relation(fields: [guildId], references: [id])
  user         User                      @relation(fields: [userId], references: [id])
  balance      CurrencyBalance?          @relation(fields: [balanceId], references: [id])

  @@index([guildId, userId, type, createdAt])
}

enum CurrencyTransactionType {
  EARN
  SPEND
  TRANSFER_IN
  TRANSFER_OUT
  ADJUST
  GAME_BET
  GAME_WIN
  DAILY_BONUS
}

model ShopItem {
  id          String   @id
  guildId     String
  name        String
  description String?
  price       Int
  roleId      String?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guild       Guild    @relation(fields: [guildId], references: [id])

  @@index([guildId])
}
